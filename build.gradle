apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'application'

/* Get first three version numbers from code.json */
def codeJson = new groovy.json.JsonSlurper().parseText(new File("code.json").text)
def jsonVersion = codeJson.version[0]

/* Get last version number from commit counts */
def lastTagHash = "git rev-list --tags --max-count=1".execute().text
lastTagHash = lastTagHash.substring(0, lastTagHash.length() - 1)
def commitCount = ("git rev-list "+lastTagHash+".. --count").execute().text
commitCount = commitCount.substring(0, commitCount.length() - 1)

version = "$jsonVersion.$commitCount"

mainClassName = 'asl.sensor.SensorSuite'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
}

dependencies {
    compile project(path: ':asl-java-utils')

    compile group: 'org.jfree', name: 'jfreechart', version: '1.5.0'

    compile group: 'org.apache.pdfbox', name: 'pdfbox', version: '2.+'
    compile group: 'org.apache.commons', name: 'commons-math3', version: '3.+'
    compile group: 'commons-configuration', name: 'commons-configuration', version: '1.7'

    compile group: 'net.sf.py4j', name: 'py4j', version: '0.10.7'

    testCompile group: 'junit', name: 'junit', version: '4.+'
}

jar {
    baseName = rootProject.name
    manifest {
        attributes 'Implementation-Title': 'ASL Sensor Test Suite',
                'Implementation-Version': version,
                'Main-Class': mainClassName
    }

    /* Adds all dependent libraries*/
    from {
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
        configurations.runtime.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

task jarServer(type: Jar) {
    baseName = 'CalServer'
    manifest {
        attributes 'Implementation-Title': 'Calibration Processing Server(cmd)',
                'Implementation-Version': version,
                'Main-Class': 'asl.sensor.CalProcessingServer'
    }

    from {
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
        configurations.runtime.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    with jar
}


test {
    maxHeapSize = "4096m"
    maxParallelForks = 4
    testLogging {
        events "skipped", "failed"
        exceptionFormat "full"
        afterSuite { desc, result ->
            if (!desc.parent) {
                println "Result: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            }
        }
    }
}

/*Turn off doclint since it is far too strict and breaks the javadoc every time*/
if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

javadoc {
    options.memberLevel = JavadocMemberLevel.PRIVATE
}

compileJava {
    options.incremental = true
}

task copyJar(type: Copy) {
    from jar
    into rootDir
}


task copyServerJar(type: Copy) {
    from jarServer
    into rootDir
}

task gitSubmodule(type: Exec) {
    description 'Update git submodules'
    println 'Downloading the test data submodule may take a long time, potentially hours depending on your connection speed.'
    println 'Interrupting may corrupt the test data submodule.'
    commandLine 'git', 'submodule', 'update', '--init', '--recursive'
}


build.dependsOn copyJar, copyServerJar, gitSubmodule
compileJava.dependsOn gitSubmodule
processTestResources.dependsOn gitSubmodule
